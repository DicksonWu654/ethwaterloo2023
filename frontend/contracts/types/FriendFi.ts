/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FriendFiInterface extends utils.Interface {
  functions: {
    "attest(uint256,uint256)": FunctionFragment;
    "create_loan(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "initialize_user()": FunctionFragment;
    "lend(uint256)": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "scores(address)": FunctionFragment;
    "settle(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attest"
      | "create_loan"
      | "initialize_user"
      | "lend"
      | "loans"
      | "repay"
      | "scores"
      | "settle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create_loan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize_user",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create_loan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;

  events: {};
}

export interface FriendFi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FriendFiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attest(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreStaked: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create_loan(
      scoreStaked: PromiseOrValue<BigNumberish>,
      timeToExpiry: PromiseOrValue<BigNumberish>,
      timeToPayBack: PromiseOrValue<BigNumberish>,
      asset_address: PromiseOrValue<string>,
      amountOwed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize_user(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lend(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        borrower: string;
        expirationDate: BigNumber;
        timeToPayBack: BigNumber;
        loan_termination_date: BigNumber;
        settled: boolean;
        started: boolean;
        asset_address: string;
        amountOwed: BigNumber;
        lender: string;
        scoreStakedOg: BigNumber;
        attestor_address: string;
        scoreStakedAttestor: BigNumber;
      }
    >;

    repay(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settle(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreToBurnOG: PromiseOrValue<BigNumberish>,
      scoreToBurnAttestor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  attest(
    loanIndex: PromiseOrValue<BigNumberish>,
    scoreStaked: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create_loan(
    scoreStaked: PromiseOrValue<BigNumberish>,
    timeToExpiry: PromiseOrValue<BigNumberish>,
    timeToPayBack: PromiseOrValue<BigNumberish>,
    asset_address: PromiseOrValue<string>,
    amountOwed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize_user(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lend(
    loanIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber
    ] & {
      borrower: string;
      expirationDate: BigNumber;
      timeToPayBack: BigNumber;
      loan_termination_date: BigNumber;
      settled: boolean;
      started: boolean;
      asset_address: string;
      amountOwed: BigNumber;
      lender: string;
      scoreStakedOg: BigNumber;
      attestor_address: string;
      scoreStakedAttestor: BigNumber;
    }
  >;

  repay(
    loanIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settle(
    loanIndex: PromiseOrValue<BigNumberish>,
    scoreToBurnOG: PromiseOrValue<BigNumberish>,
    scoreToBurnAttestor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attest(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreStaked: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    create_loan(
      scoreStaked: PromiseOrValue<BigNumberish>,
      timeToExpiry: PromiseOrValue<BigNumberish>,
      timeToPayBack: PromiseOrValue<BigNumberish>,
      asset_address: PromiseOrValue<string>,
      amountOwed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize_user(overrides?: CallOverrides): Promise<void>;

    lend(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        borrower: string;
        expirationDate: BigNumber;
        timeToPayBack: BigNumber;
        loan_termination_date: BigNumber;
        settled: boolean;
        started: boolean;
        asset_address: string;
        amountOwed: BigNumber;
        lender: string;
        scoreStakedOg: BigNumber;
        attestor_address: string;
        scoreStakedAttestor: BigNumber;
      }
    >;

    repay(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreToBurnOG: PromiseOrValue<BigNumberish>,
      scoreToBurnAttestor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    attest(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreStaked: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create_loan(
      scoreStaked: PromiseOrValue<BigNumberish>,
      timeToExpiry: PromiseOrValue<BigNumberish>,
      timeToPayBack: PromiseOrValue<BigNumberish>,
      asset_address: PromiseOrValue<string>,
      amountOwed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize_user(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lend(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreToBurnOG: PromiseOrValue<BigNumberish>,
      scoreToBurnAttestor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attest(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreStaked: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create_loan(
      scoreStaked: PromiseOrValue<BigNumberish>,
      timeToExpiry: PromiseOrValue<BigNumberish>,
      timeToPayBack: PromiseOrValue<BigNumberish>,
      asset_address: PromiseOrValue<string>,
      amountOwed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize_user(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lend(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repay(
      loanIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settle(
      loanIndex: PromiseOrValue<BigNumberish>,
      scoreToBurnOG: PromiseOrValue<BigNumberish>,
      scoreToBurnAttestor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
