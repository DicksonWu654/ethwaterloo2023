/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { FriendFi, FriendFiInterface } from "../FriendFi";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "scoreStaked",
        type: "uint256",
      },
    ],
    name: "attest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "scoreStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToPayBack",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "asset_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOwed",
        type: "uint256",
      },
    ],
    name: "create_loan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize_user",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanIndex",
        type: "uint256",
      },
    ],
    name: "lend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "loans",
    outputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expirationDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToPayBack",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "loan_termination_date",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "settled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "started",
        type: "bool",
      },
      {
        internalType: "address",
        name: "asset_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOwed",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "scoreStakedOg",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "attestor_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "scoreStakedAttestor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanIndex",
        type: "uint256",
      },
    ],
    name: "repay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "scores",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loanIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "scoreToBurnOG",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "scoreToBurnAttestor",
        type: "uint256",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class FriendFi__factory {
  static readonly abi = _abi;
  static createInterface(): FriendFiInterface {
    return new utils.Interface(_abi) as FriendFiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FriendFi {
    return new Contract(address, _abi, signerOrProvider) as FriendFi;
  }
}
